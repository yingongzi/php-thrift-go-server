// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package idl

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserID
//  - Username
//  - Age
//  - Gender
type UserInfo struct {
  UserID int32 `thrift:"userID,1" db:"userID" json:"userID"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Age int32 `thrift:"age,3" db:"age" json:"age"`
  Gender bool `thrift:"gender,4" db:"gender" json:"gender"`
}

func NewUserInfo() *UserInfo {
  return &UserInfo{}
}


func (p *UserInfo) GetUserID() int32 {
  return p.UserID
}

func (p *UserInfo) GetUsername() string {
  return p.Username
}

func (p *UserInfo) GetAge() int32 {
  return p.Age
}

func (p *UserInfo) GetGender() bool {
  return p.Gender
}
func (p *UserInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Age = v
}
  return nil
}

func (p *UserInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Gender = v
}
  return nil
}

func (p *UserInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err) }
  return err
}

func (p *UserInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("age", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:age: ", p), err) }
  if err := oprot.WriteI32(int32(p.Age)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.age (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:age: ", p), err) }
  return err
}

func (p *UserInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gender", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gender: ", p), err) }
  if err := oprot.WriteBool(bool(p.Gender)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gender (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gender: ", p), err) }
  return err
}

func (p *UserInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserInfo(%+v)", *p)
}

// Attributes:
//  - Code
//  - Msg
type ResponseHeader struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewResponseHeader() *ResponseHeader {
  return &ResponseHeader{}
}


func (p *ResponseHeader) GetCode() int32 {
  return p.Code
}

func (p *ResponseHeader) GetMsg() string {
  return p.Msg
}
func (p *ResponseHeader) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResponseHeader)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *ResponseHeader)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *ResponseHeader) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResponseHeader"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseHeader) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ResponseHeader) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *ResponseHeader) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponseHeader(%+v)", *p)
}

// Attributes:
//  - UserID
type GetUserByIdReq struct {
  UserID int32 `thrift:"userID,1,required" db:"userID" json:"userID"`
}

func NewGetUserByIdReq() *GetUserByIdReq {
  return &GetUserByIdReq{}
}


func (p *GetUserByIdReq) GetUserID() int32 {
  return p.UserID
}
func (p *GetUserByIdReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUserID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUserID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUserID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"));
  }
  return nil
}

func (p *GetUserByIdReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *GetUserByIdReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserByIdReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserByIdReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userID", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err) }
  return err
}

func (p *GetUserByIdReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserByIdReq(%+v)", *p)
}

// Attributes:
//  - Header
//  - User
type GetUserByIdResp struct {
  Header *ResponseHeader `thrift:"header,1,required" db:"header" json:"header"`
  User *UserInfo `thrift:"user,2,required" db:"user" json:"user"`
}

func NewGetUserByIdResp() *GetUserByIdResp {
  return &GetUserByIdResp{}
}

var GetUserByIdResp_Header_DEFAULT *ResponseHeader
func (p *GetUserByIdResp) GetHeader() *ResponseHeader {
  if !p.IsSetHeader() {
    return GetUserByIdResp_Header_DEFAULT
  }
return p.Header
}
var GetUserByIdResp_User_DEFAULT *UserInfo
func (p *GetUserByIdResp) GetUser() *UserInfo {
  if !p.IsSetUser() {
    return GetUserByIdResp_User_DEFAULT
  }
return p.User
}
func (p *GetUserByIdResp) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetUserByIdResp) IsSetUser() bool {
  return p.User != nil
}

func (p *GetUserByIdResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHeader bool = false;
  var issetUser bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetHeader = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetUser = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Header is not set"));
  }
  if !issetUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"));
  }
  return nil
}

func (p *GetUserByIdResp)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &ResponseHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetUserByIdResp)  ReadField2(iprot thrift.TProtocol) error {
  p.User = &UserInfo{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *GetUserByIdResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserByIdResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserByIdResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *GetUserByIdResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err) }
  return err
}

func (p *GetUserByIdResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserByIdResp(%+v)", *p)
}

// Attributes:
//  - UserInfoStr
type SetUsersReq struct {
  UserInfoStr string `thrift:"userInfoStr,1,required" db:"userInfoStr" json:"userInfoStr"`
}

func NewSetUsersReq() *SetUsersReq {
  return &SetUsersReq{}
}


func (p *SetUsersReq) GetUserInfoStr() string {
  return p.UserInfoStr
}
func (p *SetUsersReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUserInfoStr bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetUserInfoStr = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUserInfoStr{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserInfoStr is not set"));
  }
  return nil
}

func (p *SetUsersReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserInfoStr = v
}
  return nil
}

func (p *SetUsersReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetUsersReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetUsersReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userInfoStr", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userInfoStr: ", p), err) }
  if err := oprot.WriteString(string(p.UserInfoStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userInfoStr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userInfoStr: ", p), err) }
  return err
}

func (p *SetUsersReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetUsersReq(%+v)", *p)
}

// Attributes:
//  - Header
//  - UserIDs
type SetUsersResp struct {
  Header *ResponseHeader `thrift:"header,1,required" db:"header" json:"header"`
  UserIDs []int32 `thrift:"userIDs,2,required" db:"userIDs" json:"userIDs"`
}

func NewSetUsersResp() *SetUsersResp {
  return &SetUsersResp{}
}

var SetUsersResp_Header_DEFAULT *ResponseHeader
func (p *SetUsersResp) GetHeader() *ResponseHeader {
  if !p.IsSetHeader() {
    return SetUsersResp_Header_DEFAULT
  }
return p.Header
}

func (p *SetUsersResp) GetUserIDs() []int32 {
  return p.UserIDs
}
func (p *SetUsersResp) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SetUsersResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHeader bool = false;
  var issetUserIDs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetHeader = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetUserIDs = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Header is not set"));
  }
  if !issetUserIDs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserIDs is not set"));
  }
  return nil
}

func (p *SetUsersResp)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &ResponseHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SetUsersResp)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.UserIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.UserIDs = append(p.UserIDs, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SetUsersResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetUsersResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetUsersResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *SetUsersResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userIDs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userIDs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.UserIDs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserIDs {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userIDs: ", p), err) }
  return err
}

func (p *SetUsersResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetUsersResp(%+v)", *p)
}

type Php_Go_Svr interface {
  // Parameters:
  //  - Req
  GetUserByUserID(req *GetUserByIdReq) (r *GetUserByIdResp, err error)
  // Parameters:
  //  - Req
  SetUsers(req *SetUsersReq) (r *SetUsersResp, err error)
}

type Php_Go_SvrClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewPhp_Go_SvrClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *Php_Go_SvrClient {
  return &Php_Go_SvrClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewPhp_Go_SvrClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *Php_Go_SvrClient {
  return &Php_Go_SvrClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Req
func (p *Php_Go_SvrClient) GetUserByUserID(req *GetUserByIdReq) (r *GetUserByIdResp, err error) {
  if err = p.sendGetUserByUserID(req); err != nil { return }
  return p.recvGetUserByUserID()
}

func (p *Php_Go_SvrClient) sendGetUserByUserID(req *GetUserByIdReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetUserByUserID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := Php_Go_SvrGetUserByUserIDArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *Php_Go_SvrClient) recvGetUserByUserID() (value *GetUserByIdResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetUserByUserID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetUserByUserID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetUserByUserID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error2 error
    error2, err = error1.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error2
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetUserByUserID failed: invalid message type")
    return
  }
  result := Php_Go_SvrGetUserByUserIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *Php_Go_SvrClient) SetUsers(req *SetUsersReq) (r *SetUsersResp, err error) {
  if err = p.sendSetUsers(req); err != nil { return }
  return p.recvSetUsers()
}

func (p *Php_Go_SvrClient) sendSetUsers(req *SetUsersReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("SetUsers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := Php_Go_SvrSetUsersArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *Php_Go_SvrClient) recvSetUsers() (value *SetUsersResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "SetUsers" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SetUsers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SetUsers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error4 error
    error4, err = error3.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error4
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SetUsers failed: invalid message type")
    return
  }
  result := Php_Go_SvrSetUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type Php_Go_SvrProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Php_Go_Svr
}

func (p *Php_Go_SvrProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *Php_Go_SvrProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *Php_Go_SvrProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPhp_Go_SvrProcessor(handler Php_Go_Svr) *Php_Go_SvrProcessor {

  self5 := &Php_Go_SvrProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self5.processorMap["GetUserByUserID"] = &php_Go_SvrProcessorGetUserByUserID{handler:handler}
  self5.processorMap["SetUsers"] = &php_Go_SvrProcessorSetUsers{handler:handler}
return self5
}

func (p *Php_Go_SvrProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x6.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x6

}

type php_Go_SvrProcessorGetUserByUserID struct {
  handler Php_Go_Svr
}

func (p *php_Go_SvrProcessorGetUserByUserID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Php_Go_SvrGetUserByUserIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserByUserID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Php_Go_SvrGetUserByUserIDResult{}
var retval *GetUserByIdResp
  var err2 error
  if retval, err2 = p.handler.GetUserByUserID(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserByUserID: " + err2.Error())
    oprot.WriteMessageBegin("GetUserByUserID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUserByUserID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type php_Go_SvrProcessorSetUsers struct {
  handler Php_Go_Svr
}

func (p *php_Go_SvrProcessorSetUsers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := Php_Go_SvrSetUsersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SetUsers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := Php_Go_SvrSetUsersResult{}
var retval *SetUsersResp
  var err2 error
  if retval, err2 = p.handler.SetUsers(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetUsers: " + err2.Error())
    oprot.WriteMessageBegin("SetUsers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SetUsers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type Php_Go_SvrGetUserByUserIDArgs struct {
  Req *GetUserByIdReq `thrift:"req,1,required" db:"req" json:"req"`
}

func NewPhp_Go_SvrGetUserByUserIDArgs() *Php_Go_SvrGetUserByUserIDArgs {
  return &Php_Go_SvrGetUserByUserIDArgs{}
}

var Php_Go_SvrGetUserByUserIDArgs_Req_DEFAULT *GetUserByIdReq
func (p *Php_Go_SvrGetUserByUserIDArgs) GetReq() *GetUserByIdReq {
  if !p.IsSetReq() {
    return Php_Go_SvrGetUserByUserIDArgs_Req_DEFAULT
  }
return p.Req
}
func (p *Php_Go_SvrGetUserByUserIDArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *Php_Go_SvrGetUserByUserIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReq bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReq = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReq{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Req is not set"));
  }
  return nil
}

func (p *Php_Go_SvrGetUserByUserIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GetUserByIdReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *Php_Go_SvrGetUserByUserIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserByUserID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Php_Go_SvrGetUserByUserIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *Php_Go_SvrGetUserByUserIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Php_Go_SvrGetUserByUserIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type Php_Go_SvrGetUserByUserIDResult struct {
  Success *GetUserByIdResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhp_Go_SvrGetUserByUserIDResult() *Php_Go_SvrGetUserByUserIDResult {
  return &Php_Go_SvrGetUserByUserIDResult{}
}

var Php_Go_SvrGetUserByUserIDResult_Success_DEFAULT *GetUserByIdResp
func (p *Php_Go_SvrGetUserByUserIDResult) GetSuccess() *GetUserByIdResp {
  if !p.IsSetSuccess() {
    return Php_Go_SvrGetUserByUserIDResult_Success_DEFAULT
  }
return p.Success
}
func (p *Php_Go_SvrGetUserByUserIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Php_Go_SvrGetUserByUserIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Php_Go_SvrGetUserByUserIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetUserByIdResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Php_Go_SvrGetUserByUserIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserByUserID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Php_Go_SvrGetUserByUserIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Php_Go_SvrGetUserByUserIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Php_Go_SvrGetUserByUserIDResult(%+v)", *p)
}

// Attributes:
//  - Req
type Php_Go_SvrSetUsersArgs struct {
  Req *SetUsersReq `thrift:"req,1,required" db:"req" json:"req"`
}

func NewPhp_Go_SvrSetUsersArgs() *Php_Go_SvrSetUsersArgs {
  return &Php_Go_SvrSetUsersArgs{}
}

var Php_Go_SvrSetUsersArgs_Req_DEFAULT *SetUsersReq
func (p *Php_Go_SvrSetUsersArgs) GetReq() *SetUsersReq {
  if !p.IsSetReq() {
    return Php_Go_SvrSetUsersArgs_Req_DEFAULT
  }
return p.Req
}
func (p *Php_Go_SvrSetUsersArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *Php_Go_SvrSetUsersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReq bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReq = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReq{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Req is not set"));
  }
  return nil
}

func (p *Php_Go_SvrSetUsersArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SetUsersReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *Php_Go_SvrSetUsersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Php_Go_SvrSetUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *Php_Go_SvrSetUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Php_Go_SvrSetUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type Php_Go_SvrSetUsersResult struct {
  Success *SetUsersResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhp_Go_SvrSetUsersResult() *Php_Go_SvrSetUsersResult {
  return &Php_Go_SvrSetUsersResult{}
}

var Php_Go_SvrSetUsersResult_Success_DEFAULT *SetUsersResp
func (p *Php_Go_SvrSetUsersResult) GetSuccess() *SetUsersResp {
  if !p.IsSetSuccess() {
    return Php_Go_SvrSetUsersResult_Success_DEFAULT
  }
return p.Success
}
func (p *Php_Go_SvrSetUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *Php_Go_SvrSetUsersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Php_Go_SvrSetUsersResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SetUsersResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *Php_Go_SvrSetUsersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Php_Go_SvrSetUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *Php_Go_SvrSetUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Php_Go_SvrSetUsersResult(%+v)", *p)
}


